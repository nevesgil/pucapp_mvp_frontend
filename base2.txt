<!DOCTYPE html>
<html lang="en">
<head>
    <link rel="stylesheet" href="styles.css">
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Child Diary</title>
</head>
<body>
    <h1>Child Diary</h1>
    <div class="child-form">
        <input type="text" id="child-name" placeholder="Child's Name" required>
        <input type="date" id="child-birthdate" placeholder="Birthdate" required>
        <input type="text" id="child-parents" placeholder="Parents' Names" required>
        <select id="child-gender">
            <option value="male">Male</option>
            <option value="female">Female</option>
        </select>
        <button id="add-child-button">Add Child</button>
    </div>
    <div id="children-container"></div>

    <script src="script.js"></script>
</body>
</html>



-----


body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 20px;
    background-color: #f0f8ff;
    color: #333;
}

h1 {
    text-align: center;
    color: #010203;
    font-family: 'Comic Sans MS', 'Comic Sans', cursive;
}

.child-form {
    text-align: center;
    margin-bottom: 20px;
}

.child-form input,
.child-form select,
.child-form button {
    margin: 5px;
    padding: 10px;
    font-size: 16px;
    border: 2px solid #010203;
    border-radius: 5px;
    background-color: #ffebcd;
    font-family: 'Comic Sans MS', 'Comic Sans', cursive;
}

.child-form button {
    background-color: #ff69b4;
    color: white;
    cursor: pointer;
}

.child-form button:hover {
    background-color: #ff1493;
}

.child {
    background-color: white;
    padding: 20px;
    margin: 10px 0;
    border-radius: 10px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    border-left: 10px solid #125878;
}

.child.male {
    background-color: #deeff5; /* Light blue */
    border-left-color: #0c356e;
}

.child.female {
    background-color: #ffeaee; /* Light pink */
    border-left-color: #ed5cda;
}

.child h2 {
    margin: 0 0 10px 0;
    color: #010203;
    font-family: 'Comic Sans MS', 'Comic Sans', cursive;
}

.post {
    background-color: #fff;
    padding: 10px;
    margin: 10px 0;
    border-radius: 10px;
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
    display: flex;
    flex-direction: column;
    border: 2px solid #010203;
}

.tags {
    margin-top: 10px;
}

.tag {
    display: inline-block;
    background-color: #d1e7dd;
    color: #0f5132;
    padding: 2px 6px;
    margin: 2px;
    border-radius: 3px;
    font-size: 12px;
}

.tags-form {
    display: flex;
    justify-content: space-between;
    margin-top: 10px;
}

.tags-form input {
    padding: 5px;
    margin-right: 5px;
}

.tags-form button {
    padding: 5px 10px;
}

.tags-container {
    display: flex;
    flex-wrap: wrap;
    margin-top: 10px;
}

.post-tags-form {
    display: flex;
    justify-content: flex-end;
    margin-top: 10px;
}

.post-tags-form select {
    padding: 5px;
    margin-right: 5px;
}



------


document.addEventListener("DOMContentLoaded", function() {
    loadMockChildren();
    document.getElementById('add-child-button').addEventListener('click', addChild);
});

function loadMockChildren() {
    const mockChildren = [
        {
            name: "John Doe",
            birthdate: "2010-05-20",
            parents: "Jane and John Doe",
            gender: "male",
            posts: [
                { description: "John's first steps!", tags: ["milestone"] },
                { description: "First day at school", tags: ["school", "milestone"] }
            ],
            tags: ["milestone", "school", "birthday"]
        },
        {
            name: "Emily Smith",
            birthdate: "2012-08-15",
            parents: "Anna and Mike Smith",
            gender: "female",
            posts: [
                { description: "Emily's first word: Mama!", tags: ["milestone"] },
                { description: "Emily's first birthday party", tags: ["birthday", "party"] }
            ],
            tags: ["milestone", "party", "birthday"]
        }
    ];

    mockChildren.forEach(child => addChildToDOM(child));
}

function addChildToDOM(child) {
    const childContainer = document.createElement('div');
    childContainer.className = `child ${child.gender}`;

    let postsHtml = '';
    child.posts.forEach(post => {
        postsHtml += `
            <div class="post">
                <div>${post.description}</div>
                <div class="tags">
                    ${post.tags.map(tag => `<span class="tag">${tag}</span>`).join('')}
                </div>
                <div class="post-tags-form">
                    <select class="post-tags-select">
                        <option value="">Add tag</option>
                        ${child.tags.map(tag => `<option value="${tag}">${tag}</option>`).join('')}
                    </select>
                    <button class="add-post-tag-button">Add Tag</button>
                </div>
            </div>
        `;
    });

    let tagsHtml = '';
    child.tags.forEach(tag => {
        tagsHtml += `<span class="tag">${tag}</span> `;
    });

    childContainer.innerHTML = `
        <h2>${child.name}</h2>
        <p>Birthdate: ${child.birthdate}</p>
        <p>Parents: ${child.parents}</p>
        <div class="posts-container">
            ${postsHtml}
        </div>
        <textarea placeholder="Write a post..."></textarea>
        <div class="tags-form">
            <button class="add-post-button">Add Post</button>
            <div>
                <input type="text" placeholder="New tag">
                <button class="add-tag-button">Add Tag</button>
            </div>
        </div>
        <div class="tags-container">
            ${tagsHtml}
        </div>
    `;

    document.getElementById('children-container').appendChild(childContainer);

    // Add event listeners for the new child
    childContainer.querySelector('.add-post-button').addEventListener('click', () => addPost(childContainer));
    childContainer.querySelector('.add-tag-button').addEventListener('click', () => addTag(childContainer));
    childContainer.querySelectorAll('.add-post-tag-button').forEach(button => {
        button.addEventListener('click', () => addPostTag(button));
    });
}

async function addChild() {
    const name = document.getElementById('child-name').value;
    const birthdate = document.getElementById('child-birthdate').value;
    const parents = document.getElementById('child-parents').value;
    const gender = document.getElementById('child-gender').value;

    if (!name || !birthdate || !parents) {
        alert('Please fill in all fields.');
        return;
    }

    const child = { name, birthdate, parents, gender, posts: [], tags: [] };

    try {
        const response = await fetch('/api/children', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(child)
        });
        const newChild = await response.json();
        addChildToDOM(newChild);
        document.getElementById('child-name').value = '';
        document.getElementById('child-birthdate').value = '';
        document.getElementById('child-parents').value = '';
    } catch (error) {
        console.error("Failed to add child:", error);
    }
}

async function addPost(childContainer) {
    const textarea = childContainer.querySelector('textarea');
    const postText = textarea.value;
    if (!postText) {
        alert('Please enter a post.');
        return;
    }

    const childName = childContainer.querySelector('h2').innerText;
    const post = { description: postText, tags: [] };

    try {
        const response = await fetch(`/api/children/${childName}/posts`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(post)
        });
        const newPost = await response.json();
        const postContainer = childContainer.querySelector('.posts-container');
        const postElement = document.createElement('div');
        postElement.className = 'post';
        postElement.innerHTML = `
            <div>${newPost.description}</div>
            <div class="tags"></div>
            <div class="post-tags-form">
                <select class="post-tags-select">
                    <option value="">Add tag</option>
                    ${newPost.tags.map(tag => `<option value="${tag}">${tag}</option>`).join('')}
                </select>
                <button class="add-post-tag-button">Add Tag</button>
            </div>
        `;
        postContainer.appendChild(postElement);
        textarea.value = '';

        // Add event listener for the new post tag button
        postElement.querySelector('.add-post-tag-button').addEventListener('click', () => addPostTag(postElement));
    } catch (error) {
        console.error("Failed to add post:", error);
    }
}

function addTag(childContainer) {
    const input = childContainer.querySelector('.tags-form input');
    const tagText = input.value;
    if (!tagText) {
        alert('Please enter a tag.');
        return;
    }

    const childName = childContainer.querySelector('h2').innerText;
    const newTag = { tag: tagText };

    fetch(`/api/children/${childName}/tags`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(newTag)
    })
    .then(response => response.json())
    .then(updatedTags => {
        const tagsContainer = childContainer.querySelector('.tags-container');
        tagsContainer.innerHTML = updatedTags.map(tag => `<span class="tag">${tag}</span>`).join(' ');

        childContainer.querySelectorAll('.post-tags-select').forEach(select => {
            select.innerHTML = `<option value="">Add tag</option>` + updatedTags.map(tag => `<option value="${tag}">${tag}</option>`).join('');
        });
        input.value = '';
    })
    .catch(error => {
        console.error("Failed to add tag:", error);
    });
}

function addPostTag(button) {
    const select = button.previousElementSibling;
    const tag = select.value;
    if (!tag) {
        alert('Please select a tag.');
        return;
    }

    const postContainer = button.closest('.post');
    const description = postContainer.querySelector('div').innerText;
    const childContainer = postContainer.closest('.child');
    const childName = childContainer.querySelector('h2').innerText;

    fetch(`/api/children/${childName}/posts/${description}/tags`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ tag })
    })
    .then(response => response.json())
    .then(updatedPost => {
        const tagsContainer = postContainer.querySelector('.tags');
        tagsContainer.innerHTML = updatedPost.tags.map(tag => `<span class="tag">${tag}</span>`).join(' ');
        select.value = '';
    })
    .catch(error => {
        console.error("Failed to add tag to post:", error);
    });
}



-----



