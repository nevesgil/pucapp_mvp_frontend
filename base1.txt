<!DOCTYPE html>
<html lang="en">
<head>
  <link rel="stylesheet" href="styles.css">
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Child Diary</title>
</head>
<body>
    <h1>Child Diary</h1>
    <div class="child-form">
        <input type="text" id="child-name" placeholder="Child's Name" required>
        <input type="date" id="child-birthdate" placeholder="Birthdate" required>
        <input type="text" id="child-parents" placeholder="Parents' Names" required>
        <select id="child-gender">
            <option value="male">Male</option>
            <option value="female">Female</option>
        </select>
        <button onclick="addChild()">Add Child</button>
    </div>
    <div id="children-container"></div>

    <script>
        // Mock data
        const mockData = [
            {
                name: 'John',
                birthdate: '2015-04-12',
                parents: 'John Sr. and Jane',
                gender: 'male',
                posts: [
                    { description: 'First day at school', tags: ['school day', 'development'] },
                    { description: 'Learned to ride a bike', tags: ['development', 'responsibilities'] }
                ],
                tags: ['school day', 'development', 'responsibilities']
            },
            {
                name: 'Emma',
                birthdate: '2016-08-19',
                parents: 'Mike and Anna',
                gender: 'female',
                posts: [
                    { description: 'Went to the zoo', tags: ['day fun', 'animals'] },
                    { description: 'Started ballet classes', tags: ['development', 'hobbies'] }
                ],
                tags: ['day fun', 'development', 'hobbies', 'animals']
            }
        ];

        // Function to load mock data
        function loadMockData() {
            mockData.forEach(child => {
                addChildToDOM(child);
            });
        }

        // Function to add child to DOM
        function addChildToDOM(child) {
            const childContainer = document.createElement('div');
            childContainer.className = `child ${child.gender}`;

            let postsHtml = '';
            child.posts.forEach(post => {
                postsHtml += `
                    <div class="post">
                        <div>${post.description}</div>
                        <div class="tags">
                            ${post.tags.map(tag => `<span class="tag">${tag}</span>`).join('')}
                        </div>
                        <div class="post-tags-form">
                            <select class="post-tags-select">
                                <option value="">Add tag</option>
                                ${child.tags.map(tag => `<option value="${tag}">${tag}</option>`).join('')}
                            </select>
                            <button onclick="addPostTag(this)">Add Tag</button>
                        </div>
                    </div>
                `;
            });

            let tagsHtml = '';
            child.tags.forEach(tag => {
                tagsHtml += `<span class="tag">${tag}</span> `;
            });

            childContainer.innerHTML = `
                <h2>${child.name}</h2>
                <p>Birthdate: ${child.birthdate}</p>
                <p>Parents: ${child.parents}</p>
                <div class="posts-container">
                    ${postsHtml}
                </div>
                <textarea placeholder="Write a post..."></textarea>
                <div class="tags-form">
                    <button onclick="addPost(this)">Add Post</button>
                    <div>
                        <input type="text" placeholder="New tag">
                        <button onclick="addTag(this)">Add Tag</button>
                    </div>
                </div>
                <div class="tags-container">
                    ${tagsHtml}
                </div>
            `;

            document.getElementById('children-container').appendChild(childContainer);
        }

        // Function to add new child
        function addChild() {
            const name = document.getElementById('child-name').value;
            const birthdate = document.getElementById('child-birthdate').value;
            const parents = document.getElementById('child-parents').value;
            const gender = document.getElementById('child-gender').value;

            if (!name || !birthdate || !parents) {
                alert('Please fill in all fields.');
                return;
            }

            const child = {
                name,
                birthdate,
                parents,
                gender,
                posts: [],
                tags: []
            };

            addChildToDOM(child);

            // Clear form fields
            document.getElementById('child-name').value = '';
            document.getElementById('child-birthdate').value = '';
            document.getElementById('child-parents').value = '';
        }

        // Function to add new post
        function addPost(button) {
            const childContainer = button.closest('.child');
            const textarea = childContainer.querySelector('textarea');
            const postText = textarea.value;
            if (!postText) {
                alert('Please enter a post.');
                return;
            }

            const postContainer = childContainer.querySelector('.posts-container');
            const childTags = childContainer.querySelectorAll('.tags-container .tag');
            const tagsArray = Array.from(childTags).map(tag => tag.textContent);
            const postElement = document.createElement('div');
            postElement.className = 'post';
            postElement.innerHTML = `
                <div>${postText}</div>
                <div class="tags"></div>
                <div class="post-tags-form">
                    <select class="post-tags-select">
                        <option value="">Add tag</option>
                        ${tagsArray.map(tag => `<option value="${tag}">${tag}</option>`).join('')}
                    </select>
                    <button onclick="addPostTag(this)">Add Tag</button>
                </div>
            `;

            postContainer.appendChild(postElement);
            textarea.value = '';
        }

        // Function to add new tag to post
        function addPostTag(button) {
            const select = button.previousElementSibling;
            const selectedTag = select.value;
            if (!selectedTag) {
                alert('Please select a tag.');
                return;
            }

            const tagsContainer = button.closest('.post').querySelector('.tags');
            tagsContainer.innerHTML += `<span class="tag">${selectedTag}</span> `;
            select.value = '';
        }

        // Function to add new general tag
        function addTag(button) {
            const input = button.previousElementSibling;
            const newTag = input.value.trim();
            if (!newTag) {
                alert('Please enter a tag.');
                return;
            }

            const childContainer = button.closest('.child');
            const tagsContainer = childContainer.querySelector('.tags-container');
            tagsContainer.innerHTML += `<span class="tag">${newTag}</span> `;
            input.value = '';

            // Update all post tag selects
            const postTagSelects = childContainer.querySelectorAll('.post-tags-select');
            postTagSelects.forEach(select => {
                select.innerHTML += `<option value="${newTag}">${newTag}</option>`;
            });
        }

        // Load mock data on page load
        window.onload = loadMockData;
    </script>
</body>
</html>



----


body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 20px;
    background-color: #f0f8ff;
    color: #333;
}

h1 {
    text-align: center;
    color: #010203;
    font-family: 'Comic Sans MS', 'Comic Sans', cursive;
}

.child-form {
    text-align: center;
    margin-bottom: 20px;
}

.child-form input,
.child-form select,
.child-form button {
    margin: 5px;
    padding: 10px;
    font-size: 16px;
    border: 2px solid #010203;
    border-radius: 5px;
    background-color: #ffebcd;
    font-family: 'Comic Sans MS', 'Comic Sans', cursive;
}

.child-form button {
    background-color: #ff69b4;
    color: white;
    cursor: pointer;
}

.child-form button:hover {
    background-color: #ff1493;
}

.child {
    background-color: white;
    padding: 20px;
    margin: 10px 0;
    border-radius: 10px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    border-left: 10px solid #125878;
}

.child.male {
    background-color: #deeff5; /* Light blue */
    border-left-color: #0c356e;
}

.child.female {
    background-color: #ffeaee; /* Light pink */
    border-left-color: #ed5cda;
}

.child h2 {
    margin: 0 0 10px 0;
    color: #010203;
    font-family: 'Comic Sans MS', 'Comic Sans', cursive;
}

.post {
    background-color: #fff;
    padding: 10px;
    margin: 10px 0;
    border-radius: 10px;
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
    display: flex;
    flex-direction: column;
    border: 2px solid #010203;
}

.tags {
    margin-top: 10px;
}

.tag {
    display: inline-block;
    background-color: #d1e7dd;
    color: #0f5132;
    padding: 2px 6px;
    margin: 2px;
    border-radius: 3px;
    font-size: 12px;
}

.tags-form {
    display: flex;
    justify-content: space-between;
    margin-top: 10px;
}

.tags-form input {
    padding: 5px;
    margin-right: 5px;
}

.tags-form button {
    padding: 5px 10px;
}

.tags-container {
    display: flex;
    flex-wrap: wrap;
    margin-top: 10px;
}

.post-tags-form {
    display: flex;
    justify-content: flex-end;
    margin-top: 10px;
}

.post-tags-form select {
    padding: 5px;
    margin-right: 5px;
}



------


function showTime() {
	document.getElementById('currentTime').innerHTML = new Date().toUTCString();
}
showTime();
setInterval(function () {
	showTime();
}, 1000);




-----


